while true
    disp('-------------------------');
    disp('Sayısal Çözümleme Programı');
    disp('-------------------------');
    disp('Yapmak istediğiniz işlemi seçin:');
    disp('1. Doğrusal olmayan eşitliklerin ve sistemlerin çözümü');
    disp('2. Doğrusal olmayan sistemlerin sayısal çözümleri');
    disp('3. İnterpolasyon');
    disp('4. Sayısal türev');
    disp('5. Sayısal integral');
    disp('6. Newton-Cotes integral formülleri');
    disp('7. Tek adımlı yöntemler');
    disp('8. Taylor serisi hesabı');
    disp('9. Fark formülleri');
    disp('10. Hatalar');
    disp('11. Tekrarlama Yöntemleri');
    disp('12. Programdan çık');
    secim = input('İşlem seçimi (1-12): ');
    
    if secim == 12
        disp('Programdan çıkılıyor...');
        break;
    end
    
    switch secim

	case 11

	    disp('1. jacobi');
            disp('2. Gauss Seidel');
            method = input('Yöntemi seçin (1-2): ');
switch method
		case 1
% Sistemin katsayı matrisini ve sağ tarafını tanımlama
A = input('Katsayı matrisini girin: ');
b = input('Sağ tarafı girin: ');

% Başlangıç tahmin değerlerini al
x0 = input('Başlangıç tahmin değerlerini girin: ');

% İterasyon sayısını belirle
iterasyon_sayisi = input('İterasyon sayısını girin: ');

n = length(A);
x = x0;

for k = 1:iterasyon_sayisi
    x_new = zeros(n, 1);
    
    for i = 1:n
        sum = 0;
        for j = 1:n
            if j ~= i
                sum = sum + A(i, j) * x(j);
            end
        end
        x_new(i) = (b(i) - sum) / A(i, i);
    end
    
    x = x_new;
end

% Sonucu ekrana yazdırma
fprintf('Çözüm: \n');
disp(x);

		case 2

% Sistemin katsayı matrisini ve sağ tarafını tanımlama
A = input('Katsayı matrisini girin: ');
b = input('Sağ tarafı girin: ');

% Başlangıç tahmin değerlerini al
x0 = input('Başlangıç tahmin değerlerini girin: ');

% İterasyon sayısını belirle
iterasyon_sayisi = input('İterasyon sayısını girin: ');

n = length(A);
x = x0;

for k = 1:iterasyon_sayisi
    for i = 1:n
        sum = 0;
        for j = 1:n
            if j ~= i
                sum = sum + A(i, j) * x(j);
            end
        end
        x(i) = (b(i) - sum) / A(i, i);
    end
end

% Sonucu ekrana yazdırma
fprintf('Çözüm: \n');
disp(x);
  otherwise
                    disp('Geçersiz seçim!');
            end

	case 10
            disp('1. Bağıl hata');
            disp('2. Yaklaşım hatası');
            method = input('Yöntemi seçin (1-2): ');
switch method
		case 1
	% Giriş değerlerini kullanıcıdan alma
gercek_deger = input('Gerçek değeri girin: '); % Gerçek değeri kullanıcıdan al
tahmin_deger = input('Tahmin değerini girin: '); % Tahmin değerini kullanıcıdan al

% Bağıl hatayı hesaplama
bagil_hata = abs(gercek_deger - tahmin_deger) / abs(gercek_deger);

% Sonucu ekrana yazdırma
fprintf('Bağıl Hata: %.6f\n', bagil_hata);
		case 2
% Giriş değerlerini kullanıcıdan alma
gercek_deger = input('Gerçek değeri girin: '); % Gerçek değeri kullanıcıdan al
tahmin_deger = input('Tahmin değerini girin: '); % Tahmin değerini kullanıcıdan al

% Yaklaşım hatasını hesaplama
yaklasim_hata = gercek_deger - tahmin_deger;

% Sonucu ekrana yazdırma
fprintf('Yaklaşım Hatası: %.6f\n', yaklasim_hata);
  otherwise
                    disp('Geçersiz seçim!');
            end


	case 9
                        disp('Fark formulleri');
            disp('Yöntemleri seçin:');
            disp('1. İleri fark');
            disp('2. Geri fark');
            disp('3. Merkezi fark');
            method = input('Yöntemi seçin (1-3): ');
            
            switch method
                case 1
                  f = input('f(x) fonksiyonunu girin: ', 's');
x0 = input('x0 değerini girin: ');
h = input('Adım uzunluğunu girin: ');

f_sym = str2sym(f);

f_forward = (subs(f_sym, x0 + h) - subs(f_sym, x0)) / h;

fprintf('f''(%.6f) = %.6f\n', x0, f_forward);
  
                case 2
% Geriye Doğru Sonlu Fark Formülleri

% Kullanıcıdan gerekli değerleri alma
f = input('f(x) fonksiyonunu girin: ', 's');
x0 = input('x0 değerini girin: ');
h = input('Adım uzunluğunu girin: ');

% F(x) sembolik ifadesini oluşturma
f_sym = str2sym(f);

% F(x0) ve F(x0 - h) değerlerini hesaplama
f_backward = (subs(f_sym, x0) - subs(f_sym, x0 - h)) / h;

% Sonucu ekrana yazdırma
fprintf('f''(%.6f) = %.6f\n', x0, f_backward);

                  
		case 3 
% Merkeze Doğru Sonlu Fark Formülleri

% Kullanıcıdan gerekli değerleri alma
f = input('f(x) fonksiyonunu girin: ', 's');
x0 = input('x0 değerini girin: ');
h = input('Adım uzunluğunu girin: ');

% F(x) sembolik ifadesini oluşturma
f_sym = str2sym(f);

% F(x0 + h) ve F(x0 - h) değerlerini hesaplama
f_centered = (subs(f_sym, x0 + h) - subs(f_sym, x0 - h)) / (2 * h);

% Sonucu ekrana yazdırma
fprintf('f''(%.6f) = %.6f\n', x0, f_centered);


                otherwise
                    disp('Geçersiz seçim!');
            end
            
	case 8
% Taylor Serisi Hesaplama

% Kullanıcıdan gerekli değerleri alma
f = input('f(x) fonksiyonunu girin: ', 's');
x0 = input('x0 değerini girin: ');
n = input('Serinin derecesini girin (n pozitif bir tamsayı olmalıdır): ');

% F(x) sembolik ifadesini oluşturma
f_sym = str2sym(f);

% Taylor serisini hesaplama
taylor_series = taylor(f_sym, 'ExpansionPoint', x0, 'Order', n);

% Sonucu ekrana yazdırma
fprintf('Taylor Serisi (x = %.6f):\n', x0);
disp(taylor_series);

% Sonucu hesaplama
result = subs(taylor_series, 'x', x0);

% Sonucu ekrana yazdırma
fprintf('f(%.6f) = %.6f\n', x0, result);


        case 1
            disp('Doğrusal olmayan eşitliklerin ve sistemlerin çözümü');
            disp('Yöntemleri seçin:');
            disp('1. İkiye bölme yöntemi');
            disp('2. Yer değiştirme yöntemi');
            disp('3. Newton yöntemi');
            disp('4. Kiriş yöntemi (sekant yöntemi)');
            disp('5. Sabit noktalı iterasyon');
            method = input('Yöntemi seçin (1-5): ');
            
            switch method
                case 1
                   % İkiye Bölme Yöntemiyle Kök Bulma

% Kullanıcıdan gerekli değerleri alma
fonksiyon = input('Fonksiyonu girin: ', 's'); % Fonksiyonu kullanıcıdan al
a = input('Alt sınırı girin: '); % Alt sınırı kullanıcıdan al
b = input('Üst sınırı girin: '); % Üst sınırı kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al

% İkiye bölme yöntemiyle kökü bulma
while abs(b - a) > hataToleransi
    c = (a + b) / 2; % İkiye bölme noktası
    f_a = eval(subs(str2sym(fonksiyon), a)); % Alt sınırda fonksiyonun değeri
    f_c = eval(subs(str2sym(fonksiyon), c)); % İkiye bölme noktasında fonksiyonun değeri

    if f_a * f_c < 0
        b = c; % İkiye bölme noktasını yeni üst sınır olarak al
    else
        a = c; % İkiye bölme noktasını yeni alt sınır olarak al
    end
end

kok = (a + b) / 2; % Son hesaplanan kök

% Sonucu ekrana yazdırma
fprintf('Kök: %.6f\n', kok);
                case 2
                   % Yer Değiştirme Yöntemiyle Kök Bulma

% Kullanıcıdan gerekli değerleri alma
fonksiyon = input('Fonksiyonu girin: ', 's'); % Fonksiyonu kullanıcıdan al
x0 = input('Başlangıç değerini girin: '); % Başlangıç değerini kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al

% Yer değiştirme yöntemiyle kökü bulma
iterasyon = 0; % İterasyon sayacı
delta = inf; % Hata
x = x0; % Başlangıç değeri

fonksiyon_handle = eval(['@(x)' fonksiyon]); % Girdi fonksiyonunu işlev handle'ına dönüştürme

while delta > hataToleransi
    x_previous = x; % Önceki değeri sakla
    x = fonksiyon_handle(x_previous); % Yer değiştirme yöntemi uygula
    delta = abs(x - x_previous); % Hata hesapla
    iterasyon = iterasyon + 1; % İterasyon sayacını güncelle
end

kok = x; % Son hesaplanan kök

% Sonucu ekrana yazdırma
fprintf('Kök: %.6f\n', kok);
fprintf('İterasyon sayısı: %d\n', iterasyon);
                case 3
                    disp('Newton yöntemi');
                    % Newton Yöntemiyle Kök Bulma

% Kullanıcıdan gerekli değerleri alma
fonksiyon = input('Fonksiyonu girin: ', 's'); % Fonksiyonu kullanıcıdan al
x0 = input('Başlangıç değerini girin: '); % Başlangıç değerini kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al
maksIterasyon = input('Maksimum iterasyon sayısını girin: '); % Maksimum iterasyon sayısını kullanıcıdan al

% Newton yöntemiyle kökü bulma
iterasyon = 0; % İterasyon sayacı
delta = inf; % Hata
x = x0; % Başlangıç değeri

fonksiyon_handle = eval(['@(x)' fonksiyon]); % Girdi fonksiyonunu işlev handle'ına dönüştürme

h = 1e-6; % Yaklaşık türev hesaplaması için adım boyu

while delta > hataToleransi && iterasyon < maksIterasyon
    x_previous = x; % Önceki değeri sakla
    f_x = fonksiyon_handle(x_previous); % Fonksiyonu değerlendir
    f_prime_x = (fonksiyon_handle(x_previous + h) - f_x) / h; % Türevi yaklaşık olarak hesapla
    x = x_previous - (f_x / f_prime_x); % Yeni tahmin değerini hesapla
    delta = abs(x - x_previous); % Hata hesapla
    iterasyon = iterasyon + 1; % İterasyon sayacını güncelle
end

kok = x; % Son hesaplanan kök

% Sonucu ekrana yazdırma
fprintf('Kök: %.6f\n', kok);
fprintf('İterasyon sayısı: %d\n', iterasyon);
                case 4
                   % Kiriş (Sekant) Yöntemiyle Kök Bulma

% Kullanıcıdan gerekli değerleri alma
fonksiyon = input('Fonksiyonu girin: ', 's'); % Fonksiyonu kullanıcıdan al
x0 = input('Başlangıç değeri x0: '); % Başlangıç değerini kullanıcıdan al
x1 = input('Başlangıç değeri x1: '); % Başlangıç değerini kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al
maksIterasyon = input('Maksimum iterasyon sayısını girin: '); % Maksimum iterasyon sayısını kullanıcıdan al

% Kiriş (Sekant) yöntemiyle kökü bulma
iterasyon = 0; % İterasyon sayacı
delta = inf; % Hata
x_prev = x0; % Önceki değer
x = x1; % Şu anki değer

while delta > hataToleransi && iterasyon < maksIterasyon
    f_prev = eval(fonksiyon); % Önceki değer için fonksiyonu hesapla
    f = eval(fonksiyon); % Şu anki değer için fonksiyonu hesapla
    x_next = x - f * ((x - x_prev) / (f - f_prev)); % Yeni değeri hesapla
    delta = abs(x_next - x); % Hata hesapla
    x_prev = x; % Önceki değeri güncelle
    x = x_next; % Şu anki değeri güncelle
    iterasyon = iterasyon + 1; % İterasyon sayacını güncelle
end

kok = x; % Son hesaplanan kök

% Sonucu ekrana yazdırma
fprintf('Kök: %.6f\n', kok);
fprintf('İterasyon sayısı: %d\n', iterasyon);
                case 5
                   % Sabit Noktalı İterasyon Yöntemiyle Kök Bulma

% Kullanıcıdan gerekli değerleri alma
g = input('Iterasyon fonksiyonunu girin: ', 's'); % Iterasyon fonksiyonunu kullanıcıdan al
x0 = input('Başlangıç değeri x0: '); % Başlangıç değerini kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al
maksIterasyon = input('Maksimum iterasyon sayısını girin: '); % Maksimum iterasyon sayısını kullanıcıdan al

% Sabit Noktalı İterasyon yöntemiyle kökü bulma
iterasyon = 0; % İterasyon sayacı
delta = inf; % Hata
x = x0; % Başlangıç değeri

g_handle = eval(['@(x)' g]); % Girdi fonksiyonunu işlev handle'ına dönüştürme

while delta > hataToleransi && iterasyon < maksIterasyon
    x_next = g_handle(x); % Yeni değeri hesapla
    delta = abs(x_next - x); % Hata hesapla
    x = x_next; % Şu anki değeri güncelle
    iterasyon = iterasyon + 1; % İterasyon sayacını güncelle
end

kok = x; % Son hesaplanan kök

% Sonucu ekrana yazdırma
fprintf('Kök: %.6f\n', kok);
fprintf('İterasyon sayısı: %d\n', iterasyon);
                otherwise
                    disp('Geçersiz seçim!');
            end
            
        case 2
            disp('Doğrusal olmayan sistemlerin sayısal çözümleri');
            disp('Yöntemleri seçin:');
            disp('1. İki boyutlu doğrusal olmayan sistem çözümünde Newton yöntem');
            disp('2. Sabit noktalı iterasyon');
            method = input('Yöntemi seçin (1-2): ');
            
            switch method
                case 1
                    % İki Boyutlu Doğrusal Olmayan Sistem Çözümü - Newton Yöntemi

% Kullanıcıdan gerekli değerleri alma
f1 = input('İlk denklemi girin: ', 's'); % İlk denklemi kullanıcıdan al
f2 = input('İkinci denklemi girin: ', 's'); % İkinci denklemi kullanıcıdan al
x0 = input('Başlangıç değeri x0: '); % Başlangıç değeri x0'i kullanıcıdan al
y0 = input('Başlangıç değeri y0: '); % Başlangıç değeri y0'i kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al
maksIterasyon = input('Maksimum iterasyon sayısını girin: '); % Maksimum iterasyon sayısını kullanıcıdan al

% Newton yöntemiyle sistem çözümü
iterasyon = 0; % İterasyon sayacı
delta = inf; % Hata
x = x0; % Başlangıç değeri x0
y = y0; % Başlangıç değeri y0

f1_handle = eval(['@(x, y)' f1]); % İlk denklemi işlev handle'ına dönüştürme
f2_handle = eval(['@(x, y)' f2]); % İkinci denklemi işlev handle'ına dönüştürme

while delta > hataToleransi && iterasyon < maksIterasyon
    f1_value = f1_handle(x, y); % İlk denklemi değerlendir
    f2_value = f2_handle(x, y); % İkinci denklemi değerlendir
    
    % Jakobiyen matrisi hesaplaması
    J = [gradient(f1, 'x'), gradient(f1, 'y');
         gradient(f2, 'x'), gradient(f2, 'y')];
     
    % Sistem denklemi
    system_eq = [f1_value; f2_value];
    
    % Newton adımı
    delta_xy = -J \ system_eq;
    x = x + delta_xy(1);
    y = y + delta_xy(2);
    
    delta = norm(delta_xy); % Hata hesapla
    iterasyon = iterasyon + 1; % İterasyon sayacını güncelle
end

% Sonuçları ekrana yazdırma
fprintf('Kökler:\n');
fprintf('x: %.6f\n', x);
fprintf('y: %.6f\n', y);
fprintf('İterasyon sayısı: %d\n', iterasyon);
                case 2
                   % İki Boyutlu Doğrusal Olmayan Sistem Çözümü - Sabit Noktalı İterasyon Yöntemi

% Kullanıcıdan gerekli değerleri alma
f1 = input('İlk denklemi girin: ', 's'); % İlk denklemi kullanıcıdan al
f2 = input('İkinci denklemi girin: ', 's'); % İkinci denklemi kullanıcıdan al
x0 = input('Başlangıç değeri x0: '); % Başlangıç değeri x0'i kullanıcıdan al
y0 = input('Başlangıç değeri y0: '); % Başlangıç değeri y0'i kullanıcıdan al
hataToleransi = input('Hata toleransını girin: '); % Hata toleransını kullanıcıdan al
maksIterasyon = input('Maksimum iterasyon sayısını girin: '); % Maksimum iterasyon sayısını kullanıcıdan al

% Sabit Noktalı İterasyon yöntemiyle sistem çözümü
iterasyon = 0; % İterasyon sayacı
delta = inf; % Hata
x = x0; % Başlangıç değeri x0
y = y0; % Başlangıç değeri y0

f1_handle = eval(['@(x, y)' f1]); % İlk denklemi işlev handle'ına dönüştürme
f2_handle = eval(['@(x, y)' f2]); % İkinci denklemi işlev handle'ına dönüştürme

while delta > hataToleransi && iterasyon < maksIterasyon
    x_next = f1_handle(x, y); % x için yeni değer
    y_next = f2_handle(x, y); % y için yeni değer
    
    delta = norm([x_next - x; y_next - y]); % Hata hesapla
    x = x_next; % x'i güncelle
    y = y_next; % y'yi güncelle
    
    iterasyon = iterasyon + 1; % İterasyon sayacını güncelle
end

% Sonuçları ekrana yazdırma
fprintf('Kökler:\n');
fprintf('x: %.6f\n', x);
fprintf('y: %.6f\n', y);
fprintf('İterasyon sayısı: %d\n', iterasyon);
                otherwise
                    disp('Geçersiz seçim!');
            end
            
 case 3
            disp('İnterpolasyon');
            disp('Yöntemleri seçin:');
            disp('1. Doğrusal interpolasyon');
            disp('2. X. dereceden Lagrange interpolasyon polinomu');
            disp('3. X. dereceden Newton interpolasyonu');
            method = input('Yöntemi seçin (1-3): ');
            switch method
                case 1
                    % Doğrusal Interpolasyon Yöntemi

% Kullanıcıdan gerekli değerleri alma
x = input('x değerini girin: '); % x değerini kullanıcıdan al
x0 = input('x0 değerini girin: '); % x0 değerini kullanıcıdan al
x1 = input('x1 değerini girin: '); % x1 değerini kullanıcıdan al
f0 = input('f(x0) değerini girin: '); % f(x0) değerini kullanıcıdan al
f1 = input('f(x1) değerini girin: '); % f(x1) değerini kullanıcıdan al

% Doğrusal interpolasyon yöntemiyle f(x) hesaplama
f = f0 + (f1 - f0) / (x1 - x0) * (x - x0);

% Sonucu ekrana yazdırma
fprintf('f = f0 + (f1 - f0) / (x1 - x0) * (x - x0); f(%.6f) = %.6f\n', x, f);
                case 2
derece = input('Lagrange polinomunun derecesini girin: ');
nokta_sayisi = derece + 1;

degerler = zeros(nokta_sayisi, 2);
for i = 1:nokta_sayisi
    degerler(i, 1) = input(sprintf('x%d değerini girin: ', i-1));
end

for i = 1:nokta_sayisi
    degerler(i, 2) = input(sprintf('f(x%d) değerini girin: ', i-1));
end

x_degeri = input('Hesaplanacak noktanın x değerini girin: ');

n = length(degerler);
sonuc = 0;
for i = 1:n
    carpim = degerler(i, 2);
    for j = 1:n
        if j ~= i
            carpim = carpim * (x_degeri - degerler(j, 1)) / (degerler(i, 1) - degerler(j, 1));
        end
    end
    sonuc = sonuc + carpim;
end

disp(['Sonuç: ' num2str(sonuc)]);

% Oluşturulan Lagrange Polinomu
syms x;
polinom = 0;
for i = 1:n
    carpim = degerler(i, 2);
    for j = 1:n
        if j ~= i
            carpim = carpim * (x - degerler(j, 1)) / (degerler(i, 1) - degerler(j, 1));
        end
    end
    polinom = polinom + carpim;
end

disp('Lagrange Polinomu:');
disp(polinom);


                
		case 3
derece = input('Newton İnterpolasyonu için polinomun derecesini girin: ');
nokta_sayisi = derece + 1;

degerler = zeros(nokta_sayisi, 2);

for i = 1:nokta_sayisi
    degerler(i, 1) = input(sprintf('x%d değerini girin: ', i-1));
end

for i = 1:nokta_sayisi
    degerler(i, 2) = input(sprintf('f(x%d) değerini girin: ', i-1));
end

x_degeri = input('Hesaplanacak noktanın x değerini girin: ');

n = length(degerler);

farklar = zeros(n, n);
farklar(:, 1) = degerler(:, 2);
for j = 2:n
    for i = 1:n-j+1
        farklar(i, j) = (farklar(i+1, j-1) - farklar(i, j-1)) / (degerler(i+j-1, 1) - degerler(i, 1));
    end
end

sonuc = degerler(1, 2);
carpim = 1;
for j = 2:n
    carpim = carpim * (x_degeri - degerler(j-1, 1));
    sonuc = sonuc + farklar(1, j) * carpim;
end

disp(['Sonuç: ' num2str(sonuc)]);

% Oluşturulan Newton İnterpolasyon Polinomu
syms x;
polinom = degerler(1, 2);
for j = 2:n
    carpim = 1;
    for k = 1:j-1
        carpim = carpim * (x - degerler(k, 1));
    end
    polinom = polinom + farklar(1, j) * carpim;
end

disp('Newton İnterpolasyon Polinomu:');
disp(polinom);

                otherwise
                    disp('Geçersiz seçim!');
            end
            
        case 4
            disp('Sayısal türev');
            disp('Yöntemleri seçin:');
            disp('1. Taylor seri açılımı kullanarak sayısal türev');
            disp('2. Lagrange polinomu kullanarak sayısal türev');
            disp('3. Richardson extrapolasyonu');
            method = input('Yöntemi seçin (1-3): ');
            
            switch method
                case 1
                    % Taylor Serisi ile Sayısal Türev Hesaplama

% Kullanıcıdan gerekli değerleri alma
x = input('x değerini girin: '); % x değerini kullanıcıdan al
h = input('h değerini girin: '); % h değerini kullanıcıdan al
n = input('n değerini girin: '); % n değerini kullanıcıdan al

% f(x) fonksiyonunu tanımlama (örnek olarak sin(x) kullanıldı)
f = @(x) sin(x);

% Sayısal türev hesaplama
derivative = (f(x + h) - f(x)) / h;

% Taylor serisi ile sayısal türev hesaplama
for i = 2:n
    derivative = derivative + (-1)^(i-1) * (h^(i-1)) * f(x) / factorial(i-1);
end

% Sonucu ekrana yazdırma
fprintf('f''(%.6f) = %.6f\n', x, derivative);
                case 2
                    % Lagrange Polinomu ile Sayısal Türev Hesaplama

% Kullanıcıdan gerekli değerleri alma
x = input('x değerini girin: '); % x değerini kullanıcıdan al
h = input('h değerini girin: '); % h değerini kullanıcıdan al
n = input('n değerini girin: '); % n değerini kullanıcıdan al

% f(x) fonksiyonunu tanımlama (örnek olarak sin(x) kullanıldı)
f = @(x) sin(x);

% Sayısal türev hesaplama
derivative = (f(x + h) - f(x - h)) / (2 * h);

% Sonucu ekrana yazdırma
fprintf('f''(%.6f) = %.6f\n', x, derivative);
                case 3
                    % Richardson Ekstrapolasyonu ile Sayısal Çözüm Geliştirme

% Kullanıcıdan gerekli değerleri alma
x = input('x değerini girin: '); % x değerini kullanıcıdan al
h = input('h değerini girin: '); % h değerini kullanıcıdan al
n = input('n değerini girin: '); % n değerini kullanıcıdan al

% f(x) fonksiyonunu tanımlama
syms f(x) % f(x) sembolik fonksiyonunu tanımla
f(x) = input('f(x) fonksiyonunu girin: '); % f(x) fonksiyonunu kullanıcıdan al

% Richardson ekstrapolasyonu ile sayısal çözüm geliştirme
approximation = sym(zeros(n, n));
approximation(1, 1) = subs(f(x), x, x); % İlk yaklaşımı kaydet

for i = 2:n
    h = h / 2; % adım boyunu yarıya indir
    sum = sym(0);
    
    for j = 1:2^(i-2)
        xi = x + 2 * h;
        sum = sum + subs(f(x), x, xi);
    end
    
    approximation(i, 1) = 0.5 * approximation(i-1, 1) + h * sum;
    
    for k = 2:i
        power = 4^(k-1);
        approximation(i, k) = (power * approximation(i, k-1) - approximation(i-1, k-1)) / (power - 1);
    end
end

% Sonuçları ekrana yazdırma
for i = 1:n
    fprintf('Yaklaşım %d: %.6f\n', i, double(approximation(i, i)));
end
                otherwise
                    disp('Geçersiz seçim!');
            end
            
        case 5
            disp('Sayısal integral');
            disp('Yöntemleri seçin:');
            disp('1. Dikdörtgen yöntemi');
            method = input('Yöntemi seçin (1): ');
            
            switch method
                case 1
                    % Sayısal Integral - Dikdörtgen Yöntemi

% Kullanıcıdan gerekli değerleri alma
a = input('Alt sınır a değerini girin: '); % Alt sınır a değerini kullanıcıdan al
b = input('Üst sınır b değerini girin: '); % Üst sınır b değerini kullanıcıdan al
n = input('n değerini girin: '); % İnterval sayısını kullanıcıdan al

% f(x) fonksiyonunu tanımlama
syms f(x) % f(x) sembolik fonksiyonunu tanımla
f(x) = input('f(x) fonksiyonunu girin: '); % f(x) fonksiyonunu kullanıcıdan al

% Intervalin genişliğini hesaplama
h = (b - a) / n;

% Dikdörtgen yöntemi ile sayısal integral hesaplama
integral_approx = 0;
x = a;

for i = 1:n
    integral_approx = integral_approx + subs(f(x), x, x + h);
    x = x + h;
end

integral_approx = integral_approx * h;

% Sonucu ekrana yazdırma
fprintf('Sayısal integral yaklaşımı: %.6f\n', double(integral_approx));
                otherwise
                    disp('Geçersiz seçim!');
            end
            
        case 6
            disp('Newton-Cotes integral formülleri');
            disp('Yöntemleri seçin:');
            disp('1. Yamuk yöntemi');
            disp('2. 1/3 Simpson yöntemi');
            disp('3. 3/8 Simpson yöntemi');
            method = input('Yöntemi seçin (1-3): ');
            
            switch method
                case 1
                    % Sayısal Integral - Yamuk Yöntemi (Trapezoid Kuralı)

% Kullanıcıdan gerekli değerleri alma
a = input('Alt sınır a değerini girin: '); % Alt sınır a değerini kullanıcıdan al
b = input('Üst sınır b değerini girin: '); % Üst sınır b değerini kullanıcıdan al
n = input('n değerini girin: '); % İnterval sayısını kullanıcıdan al

% f(x) fonksiyonunu tanımlama
syms f(x) % f(x) sembolik fonksiyonunu tanımla
f(x) = input('f(x) fonksiyonunu girin: '); % f(x) fonksiyonunu kullanıcıdan al

% Intervalin genişliğini hesaplama
h = (b - a) / n;

% Yamuk yöntemi ile sayısal integral hesaplama
integral_approx = 0;
x = a;

for i = 1:n
    integral_approx = integral_approx + (subs(f(x), x, x) + subs(f(x), x, x + h)) / 2;
    x = x + h;
end

integral_approx = integral_approx * h;

% Sonucu ekrana yazdırma
fprintf('Sayısal integral yaklaşımı: %.6f\n', double(integral_approx));
                case 2
                    % Sayısal Integral - 1/3 Simpson Yöntemi

% Kullanıcıdan gerekli değerleri alma
a = input('Alt sınır a değerini girin: '); % Alt sınır a değerini kullanıcıdan al
b = input('Üst sınır b değerini girin: '); % Üst sınır b değerini kullanıcıdan al
n = input('n değerini girin (n tek sayı olmalıdır): '); % İnterval sayısını kullanıcıdan al

% f(x) fonksiyonunu tanımlama
syms f(x) % f(x) sembolik fonksiyonunu tanımla
f(x) = input('f(x) fonksiyonunu girin: '); % f(x) fonksiyonunu kullanıcıdan al

% Intervalin genişliğini hesaplama
h = (b - a) / n;

% 1/3 Simpson yöntemi ile sayısal integral hesaplama
integral_approx = 0;
x = a;

for i = 1:n/2
    integral_approx = integral_approx + (subs(f(x), x, x) + 4*subs(f(x), x, x + h) + subs(f(x), x, x + 2*h));
    x = x + 2*h;
end

integral_approx = integral_approx * h/3;

% Sonucu ekrana yazdırma
fprintf('Sayısal integral yaklaşımı: %.6f\n', double(integral_approx));
                case 3
                   % Sayısal Integral - 3/8 Simpson Yöntemi

% Kullanıcıdan gerekli değerleri alma
a = input('Alt sınır a değerini girin: '); % Alt sınır a değerini kullanıcıdan al
b = input('Üst sınır b değerini girin: '); % Üst sınır b değerini kullanıcıdan al
n = input('n değerini girin (n 3''e tam bölünebilen bir sayı olmalıdır): '); % İnterval sayısını kullanıcıdan al

% f(x) fonksiyonunu tanımlama
syms f(x) % f(x) sembolik fonksiyonunu tanımla
f(x) = input('f(x) fonksiyonunu girin: '); % f(x) fonksiyonunu kullanıcıdan al

% Intervalin genişliğini hesaplama
h = (b - a) / n;

% 3/8 Simpson yöntemi ile sayısal integral hesaplama
integral_approx = 0;
x = a;

for i = 1:n/3
    integral_approx = integral_approx + (subs(f(x), x, x) + 3*subs(f(x), x, x + h) + 3*subs(f(x), x, x + 2*h) + subs(f(x), x, x + 3*h));
    x = x + 3*h;
end

integral_approx = integral_approx * 3*h/8;

% Sonucu ekrana yazdırma
fprintf('Sayısal integral yaklaşımı: %.6f\n', double(integral_approx));
                otherwise
                    disp('Geçersiz seçim!');
            end
            
        case 7
            disp('Tek adımlı yöntemler');
            disp('Yöntemleri seçin:');
            disp('1. Euler yöntemi');
            disp('2. Açık Euler yöntemi');
            disp('3. Kapalı Euler yöntemi');
            disp('4. İkinci dereceden Runge-Kutta yöntemi');
            method = input('Yöntemi seçin (1-4): ');
            
            switch method
                case 1
                    % Euler Yöntemi ile Sayısal Çözüm

% İşlenecek diferansiyel denklemi tanımlama
syms x;
syms y(x);
eqn = input('Diferansiyel denklemi girin: '); % Diferansiyel denklemi kullanıcıdan al
y0 = input('Başlangıç değerini girin: '); % Başlangıç değerini kullanıcıdan al
x0 = input('Başlangıç noktasını girin: '); % Başlangıç noktasını kullanıcıdan al
h = input('Adım boyunu girin: '); % Adım boyunu kullanıcıdan al
x_end = input('Bitiş noktasını girin: '); % Bitiş noktasını kullanıcıdan al

% Diferansiyel denklemin fonksiyonunu tanımlama
f = matlabFunction(eqn, 'Vars', {'x', 'y'});

% Euler yöntemi ile sayısal çözüm
x = x0:h:x_end;
y = zeros(size(x));
y(1) = y0;

for i = 1:length(x)-1
    y(i+1) = y(i) + h * f(x(i), y(i));
end

% Sonucu ekrana yazdırma
disp('Sayısal Çözüm:');
disp([x' y']);
                case 2
                    % Açık Euler Yöntemi ile Sayısal Çözüm

% İşlenecek diferansiyel denklemi tanımlama
syms x;
syms y(x);
eqn = input('Diferansiyel denklemi girin: '); % Diferansiyel denklemi kullanıcıdan al
y0 = input('Başlangıç değerini girin: '); % Başlangıç değerini kullanıcıdan al
x0 = input('Başlangıç noktasını girin: '); % Başlangıç noktasını kullanıcıdan al
h = input('Adım boyunu girin: '); % Adım boyunu kullanıcıdan al
x_end = input('Bitiş noktasını girin: '); % Bitiş noktasını kullanıcıdan al

% Diferansiyel denklemin fonksiyonunu tanımlama
f = matlabFunction(eqn, 'Vars', {'x', 'y'});

% Açık Euler yöntemi ile sayısal çözüm
x = x0:h:x_end;
y = zeros(size(x));
y(1) = y0;

for i = 1:length(x)-1
    y(i+1) = y(i) + h * f(x(i), y(i));
end

% Sonucu ekrana yazdırma
disp('Sayısal Çözüm:');
disp([x' y']);
                case 3
                    % Kapalı Euler Yöntemi ile Sayısal Çözüm

% İşlenecek diferansiyel denklemi tanımlama
syms x;
syms y(x);
eqn = input('Diferansiyel denklemi girin: '); % Diferansiyel denklemi kullanıcıdan al
y0 = input('Başlangıç değerini girin: '); % Başlangıç değerini kullanıcıdan al
x0 = input('Başlangıç noktasını girin: '); % Başlangıç noktasını kullanıcıdan al
h = input('Adım boyunu girin: '); % Adım boyunu kullanıcıdan al
x_end = input('Bitiş noktasını girin: '); % Bitiş noktasını kullanıcıdan al

% Diferansiyel denklemin fonksiyonunu tanımlama
f = matlabFunction(eqn, 'Vars', {'x', 'y'});

% Kapalı Euler yöntemi ile sayısal çözüm
x = x0:h:x_end;
y = zeros(size(x));
y(1) = y0;

for i = 1:length(x)-1
    % İteratif çözüm
    y_prev = y(i);
    x_next = x(i+1);
    y_next = y_prev + h * f(x(i), y_prev);
    
    % Hesaplanan değeri iterasyonla güncelleme
    while abs(y_next - y_prev) > 1e-6 % İstenilen tolerans değeri
        y_prev = y_next;
        y_next = y(i) + h * f(x(i+1), y_prev);
    end
    
    y(i+1) = y_next;
end

% Sonucu ekrana yazdırma
disp('Sayısal Çözüm:');
disp([x' y']);
                case 4
% İkinci Dereceden Runge-Kutta Yöntemi ile Sayısal Çözüm

% İşlenecek diferansiyel denklemi tanımlama
syms x;
syms y(x);
eqn = input('Diferansiyel denklemi girin: '); % Diferansiyel denklemi kullanıcıdan al
y0 = input('Başlangıç değerini girin: '); % Başlangıç değerini kullanıcıdan al
x0 = input('Başlangıç noktasını girin: '); % Başlangıç noktasını kullanıcıdan al
h = input('Adım boyunu girin: '); % Adım boyunu kullanıcıdan al
x_end = input('Bitiş noktasını girin: '); % Bitiş noktasını kullanıcıdan al

% Diferansiyel denklemin fonksiyonunu tanımlama
f = matlabFunction(eqn, 'Vars', {'x', 'y'});

% İkinci dereceden Runge-Kutta yöntemi ile sayısal çözüm
x = x0:h:x_end;
y = zeros(size(x));
y(1) = y0;

for i = 1:length(x)-1
    % İteratif çözüm
    k1 = h * f(x(i), y(i));
    k2 = h * f(x(i) + h/2, y(i) + k1/2);
    k3 = h * f(x(i) + h/2, y(i) + k2/2);
    k4 = h * f(x(i) + h, y(i) + k3);
    
    % Sonraki değeri hesaplama
    y(i+1) = y(i) + (k1 + 2*k2 + 2*k3 + k4) / 6;
end

% Sonucu ekrana yazdırma
disp('Sayısal Çözüm:');
disp([x' y']);

                otherwise
                    disp('Geçersiz seçim!');
            end
    end
    
    secim2 = input('Yeni bir işlem yapmak için 1, programdan çıkmak için başka bir tuş girin: ');
    if secim2 ~= 1
        disp('Programdan çıkılıyor...');
        break;
    end
end
